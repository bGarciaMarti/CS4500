/*
reads two strings from a file named "strings.txt"
then count the number of times the second string (s2) appears as a substring in the first string (s1)
Then distribute among 10 threads for concurrent execution.
*/

#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define MAX 10240
#define NUM_THREADS 10

int n1, n2;
char *s1, *s2;
FILE *fp;
int countArray[NUM_THREADS] = {0}; // Array to store counts from each thread

// Function to read input file and generate strings s1 and s2 and their lengths n1 and n2
int readf(FILE *fp)
{
    if ((fp = fopen("strings.txt", "r")) == NULL)
    {
        printf("ERROR: File could not be opened.");
        return 0;
    } else {


    s1 = (char *)malloc(sizeof(char) * MAX);
    if (s1 == NULL)
    {   printf("ERROR: Out of memory!\n");
        return -1;
    }
    s2 = (char *)malloc(sizeof(char) * MAX);
    if (s2 == NULL)
    {
        printf("ERROR: Out of memory\n");
        return -1;
    }

    // Read s1 and s2 from the file
    s1 = fgets(s1, MAX, fp);
    s2 = fgets(s2, MAX, fp);
    n1 = strlen(s1);  // Length of s1
    n2 = strlen(s2) - 1; // Length of s2 (excluding newline)

    if (s1 == NULL || s2 == NULL || n1 < n2) // Exit on error
        return -1;
    return 0;
}

// Function to count substrings in a segment assigned to a specific thread
void num_substring(int t)
{
    int start = t * (n1 / NUM_THREADS); // Start index for this thread
    int end = start + (n1 / NUM_THREADS); // End index for this thread

    for (int i = start; i <= end - n2; i++)
    {
        int count = 0;
        for (int j = i, k = 0; k < n2; j++, k++)
        {
            if (*(s1 + j) != *(s2 + k))
            {
                break;
            }
            else
            {
                count++;
            }
        }
        if (count == n2)
        {
            countArray[t]++; // Increment count for this thread
        }
    }
}

// Thread function
void *calSubStringThread(void *threadid)
{
    long tid = (long)threadid;
    num_substring(tid); // Call num_substring for this thread
    pthread_exit(NULL);
}

int main(int argc, char *argv[])
{
    pthread_t threads[NUM_THREADS];
    int t, rc;
    int totalNum = 0;

    readf(fp);

    // Create threads
    for (t = 0; t < NUM_THREADS; t++)
    {
        rc = pthread_create(&threads[t], NULL, calSubStringThread, (void *)(size_t)t);
        if (rc)
        {
            printf("ERROR; return code from pthread_create() is %d\n", rc);
            exit(-1);
        }
    }

    // Join threads
    for (t = 0; t < NUM_THREADS; t++)
    {
        pthread_join(threads[t], NULL);
    }

    // Sum up the counts from all threads
    for (t = 0; t < NUM_THREADS; t++)
    {
        totalNum += countArray[t];
    }

    printf("The number of substrings is: %d\n", totalNum);
    return 1;
}